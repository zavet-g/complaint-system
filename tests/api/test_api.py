#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±
"""

import requests
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:8000"

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{BASE_URL}/health/")
        if response.status_code == 200:
            print("‚úÖ Health check —É—Å–ø–µ—à–µ–Ω")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            print(f"‚ùå Health check –Ω–µ—É–¥–∞—á–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")

def test_create_complaint(text, expected_category=None):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã"""
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã: {text[:50]}...")
    try:
        data = {"text": text}
        response = requests.post(
            f"{BASE_URL}/complaints/",
            json=data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ñ–∞–ª–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   ID: {result['id']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
            print(f"   –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {result['sentiment']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
            
            if expected_category and result['category'] == expected_category:
                print(f"   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {expected_category}")
            elif expected_category:
                print(f"   ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–∞—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {expected_category}, –ø–æ–ª—É—á–µ–Ω–∞: {result['category']}")
            
            return result['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
        return None

def test_get_complaints():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±"""
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±...")
    try:
        response = requests.get(f"{BASE_URL}/complaints/")
        if response.status_code == 200:
            complaints = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∂–∞–ª–æ–±: {len(complaints)}")
            for complaint in complaints[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ID: {complaint['id']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint['category']}, –°—Ç–∞—Ç—É—Å: {complaint['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {e}")

def test_get_recent_complaints():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±"""
    print("\nüïê –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±...")
    try:
        response = requests.get(f"{BASE_URL}/complaints/recent/?hours=1&status=open")
        if response.status_code == 200:
            complaints = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {len(complaints)}")
            for complaint in complaints:
                print(f"   ID: {complaint['id']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint['category']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {e}")

def test_update_complaint(complaint_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã"""
    print(f"\n‚úèÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã ID: {complaint_id}...")
    try:
        data = {"status": "closed"}
        response = requests.put(
            f"{BASE_URL}/complaints/{complaint_id}/",
            json=data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ñ–∞–ª–æ–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {result['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")

def test_get_complaint(complaint_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∂–∞–ª–æ–±—ã"""
    print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã ID: {complaint_id}...")
    try:
        response = requests.get(f"{BASE_URL}/complaints/{complaint_id}/")
        if response.status_code == 200:
            complaint = response.json()
            print("‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –¢–µ–∫—Å—Ç: {complaint.get('text', 'N/A')[:100]}...")
            print(f"   –°—Ç–∞—Ç—É—Å: {complaint['status']}")
            print(f"   –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {complaint['sentiment']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint['category']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    test_health_check()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∂–∞–ª–æ–±—ã
    test_complaints = [
        {
            "text": "–°–∞–π—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É 500. –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É–∂–µ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å.",
            "expected_category": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è"
        },
        {
            "text": "–°–ø–∏—Å–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –¥–≤–∞–∂–¥—ã –∑–∞ –æ–¥–Ω—É —É—Å–ª—É–≥—É. –ù—É–∂–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É.",
            "expected_category": "–æ–ø–ª–∞—Ç–∞"
        },
        {
            "text": "–ü–ª–æ—Ö–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–±—è—Ç –∏ –Ω–µ —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã.",
            "expected_category": "–¥—Ä—É–≥–æ–µ"
        },
        {
            "text": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ iPhone, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–ª–µ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            "expected_category": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è"
        },
        {
            "text": "–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç SMS-–∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
            "expected_category": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è"
        }
    ]
    
    created_ids = []
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∂–∞–ª–æ–±—ã
    for i, complaint in enumerate(test_complaints, 1):
        print(f"\n--- –¢–µ—Å—Ç {i} ---")
        complaint_id = test_create_complaint(
            complaint["text"], 
            complaint["expected_category"]
        )
        if complaint_id:
            created_ids.append(complaint_id)
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±
    test_get_complaints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±
    test_get_recent_complaints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∂–∞–ª–æ–±—ã
    if created_ids:
        test_get_complaint(created_ids[0])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã
    if created_ids:
        test_update_complaint(created_ids[0])
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∂–∞–ª–æ–±: {len(created_ids)}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 