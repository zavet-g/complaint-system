#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import httpx
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class IntegrationTester:
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.results = {}
    
    async def test_health_check(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
        print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/health/")
                if response.status_code == 200:
                    print("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.results["health"] = True
                    return True
                else:
                    print(f"‚ùå Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                    self.results["health"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            self.results["health"] = False
            return False
    
    async def test_complaint_creation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã"""
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã...")
        try:
            test_complaint = {
                "text": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - —Å–∞–π—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/complaints/",
                    json=test_complaint,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –ñ–∞–ª–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {data.get('id')}")
                    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}")
                    print(f"   –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('sentiment')}")
                    self.results["complaint_creation"] = True
                    self.results["complaint_id"] = data.get('id')
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    self.results["complaint_creation"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
            self.results["complaint_creation"] = False
            return False
    
    async def test_telegram_notification(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{self.base_url}/telegram/test/")
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        print("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        self.results["telegram"] = True
                        return True
                    else:
                        print(f"‚ùå Telegram –æ—à–∏–±–∫–∞: {data.get('message')}")
                        self.results["telegram"] = False
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code}")
                    self.results["telegram"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
            self.results["telegram"] = False
            return False
    
    async def test_complaints_list(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±"""
        print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/complaints/")
                
                if response.status_code == 200:
                    complaints = response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∂–∞–ª–æ–±: {len(complaints)}")
                    self.results["complaints_list"] = True
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {response.status_code}")
                    self.results["complaints_list"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {e}")
            self.results["complaints_list"] = False
            return False
    
    async def test_recent_complaints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±"""
        print("üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/complaints/recent/?hours=1")
                
                if response.status_code == 200:
                    complaints = response.json()
                    print(f"‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {len(complaints)}")
                    self.results["recent_complaints"] = True
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {response.status_code}")
                    self.results["recent_complaints"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∂–∞–ª–æ–±: {e}")
            self.results["recent_complaints"] = False
            return False
    
    async def test_daily_report(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{self.base_url}/telegram/daily-report/")
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        report_data = data.get("data", {})
                        print(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        print(f"   –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {report_data.get('total_complaints', 0)}")
                        print(f"   –û—Ç–∫—Ä—ã—Ç—ã—Ö –∂–∞–ª–æ–±: {report_data.get('open_complaints', 0)}")
                        self.results["daily_report"] = True
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {data.get('message')}")
                        self.results["daily_report"] = False
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ API: {response.status_code}")
                    self.results["daily_report"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            self.results["daily_report"] = False
            return False
    
    async def test_google_sheets_setup(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{self.base_url}/sheets/setup/")
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        print("‚úÖ Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                        self.results["google_sheets_setup"] = True
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {data.get('message')}")
                        self.results["google_sheets_setup"] = False
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API: {response.status_code}")
                    self.results["google_sheets_setup"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            self.results["google_sheets_setup"] = False
            return False
    
    async def test_google_sheets_summary(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ Google Sheets"""
        print("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ Google Sheets...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/sheets/summary/")
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        summary = data.get("data", {})
                        print(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {summary.get('total_complaints', 0)} –∂–∞–ª–æ–±")
                        self.results["google_sheets_summary"] = True
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏: {data.get('message')}")
                        self.results["google_sheets_summary"] = False
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏ API: {response.status_code}")
                    self.results["google_sheets_summary"] = False
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏: {e}")
            self.results["google_sheets_summary"] = False
            return False
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*50)
        
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result is True)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìã –î–µ—Ç–∞–ª–∏:")
        for test_name, result in self.results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {test_name}")
        
        if passed_tests == total_tests:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("="*50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await self.test_health_check()
        await self.test_complaint_creation()
        await self.test_telegram_notification()
        await self.test_complaints_list()
        await self.test_recent_complaints()
        await self.test_daily_report()
        await self.test_google_sheets_setup()
        await self.test_google_sheets_summary()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        self.print_summary()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 