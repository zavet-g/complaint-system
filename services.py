import httpx
import os
from openai import OpenAI
from typing import Optional, Dict, Any
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials

load_dotenv()

class SentimentService:
    def __init__(self):
        self.api_key = os.getenv("SENTIMENT_API_KEY")
        self.base_url = "https://api.apilayer.com/sentiment/analysis"
    
    async def analyze_sentiment(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ APILayer"""
        if not self.api_key:
            return "unknown"
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.base_url,
                    headers={"apikey": self.api_key},
                    json={"text": text},
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    sentiment = data.get("sentiment", "unknown")
                    return sentiment.lower()
                else:
                    return "unknown"
        except Exception as e:
            print(f"Error analyzing sentiment: {e}")
            return "unknown"

class SpamService:
    def __init__(self):
        self.api_key = os.getenv("SPAM_API_KEY")
        self.base_url = "https://api.api-ninjas.com/v1/spamcheck"
    
    async def check_spam(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º —á–µ—Ä–µ–∑ API Ninjas"""
        if not self.api_key:
            return {"is_spam": False, "score": 0}
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    self.base_url,
                    headers={"X-Api-Key": self.api_key},
                    params={"text": text},
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {"is_spam": False, "score": 0}
        except Exception as e:
            print(f"Error checking spam: {e}")
            return {"is_spam": False, "score": 0}

class GeolocationService:
    def __init__(self):
        self.base_url = "http://ip-api.com/json"
    
    async def get_location(self, ip: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP —á–µ—Ä–µ–∑ IP API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/{ip}",
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {}
        except Exception as e:
            print(f"Error getting location: {e}")
            return {}

class AICategoryService:
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        if self.api_key:
            self.client = OpenAI(api_key=self.api_key)
        else:
            self.client = None
    
    async def categorize_complaint(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–ª–æ–±—ã —Å –ø–æ–º–æ—â—å—é OpenAI"""
        if not self.api_key or not self.client:
            return "–¥—Ä—É–≥–æ–µ"
        
        try:
            prompt = f'–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã: "{text}". –í–∞—Ä–∏–∞–Ω—Ç—ã: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, –æ–ø–ª–∞—Ç–∞, –¥—Ä—É–≥–æ–µ. –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.'
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∂–∞–ª–æ–± –∫–ª–∏–µ–Ω—Ç–æ–≤."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=10,
                temperature=0.1
            )
            
            category = response.choices[0].message.content.strip().lower() if response.choices[0].message.content else "–¥—Ä—É–≥–æ–µ"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            valid_categories = ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–æ–ø–ª–∞—Ç–∞", "–¥—Ä—É–≥–æ–µ"]
            if category in valid_categories:
                return category
            else:
                return "–¥—Ä—É–≥–æ–µ"
                
        except Exception as e:
            print(f"Error categorizing complaint: {e}")
            return "–¥—Ä—É–≥–æ–µ"

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_notification(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            print("Telegram bot not configured")
            return False
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.chat_id,
                        "text": message,
                        "parse_mode": parse_mode
                    },
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("ok", False)
                else:
                    print(f"Telegram API error: {response.status_code}")
                    return False
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            return False
    
    async def send_complaint_notification(self, complaint_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
        if not self.bot_token or not self.chat_id:
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üö® <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #{complaint_data.get('id', 'N/A')}</b>

üìù <b>–¢–µ–∫—Å—Ç:</b> {complaint_data.get('text', 'N/A')}

üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {complaint_data.get('category', 'N/A')}
üòä <b>–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {complaint_data.get('sentiment', 'N/A')}
üìç <b>IP:</b> {complaint_data.get('ip_address', 'N/A')}
üïê <b>–í—Ä–µ–º—è:</b> {complaint_data.get('created_at', 'N/A')}

{'‚ö†Ô∏è <b>–°–ø–∞–º:</b> –î–∞' if complaint_data.get('is_spam', False) else ''}
        """.strip()
        
        return await self.send_notification(message)
    
    async def send_daily_report(self, complaints_count: int, open_complaints: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üìà <b>–í—Å–µ–≥–æ –∂–∞–ª–æ–± –∑–∞ –¥–µ–Ω—å:</b> {complaints_count}
üî¥ <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –∂–∞–ª–æ–±:</b> {open_complaints}
‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {complaints_count - open_complaints}

üïê –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """.strip()
        
        return await self.send_notification(message) 

class GoogleSheetsService:
    def __init__(self):
        self.credentials_file = os.getenv("GOOGLE_SHEETS_CREDENTIALS_FILE", "google-credentials.json")
        self.spreadsheet_id = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")
        self.sheet_name = os.getenv("GOOGLE_SHEET_NAME", "–ñ–∞–ª–æ–±—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        
        try:
            print(f"DEBUG: Checking file {self.credentials_file}, exists: {os.path.exists(self.credentials_file)}")
            if os.path.exists(self.credentials_file):
                print(f"DEBUG: Loading credentials from {self.credentials_file}")
                credentials = Credentials.from_service_account_file(
                    self.credentials_file, scopes=scope
                )
                print(f"DEBUG: Authorizing with gspread")
                self.client = gspread.authorize(credentials)
                print(f"DEBUG: Opening spreadsheet {self.spreadsheet_id}")
                self.spreadsheet = self.client.open_by_key(self.spreadsheet_id)
                print(f"DEBUG: Available worksheets: {[ws.title for ws in self.spreadsheet.worksheets()]}")
                print(f"DEBUG: Getting worksheet '{self.sheet_name}'")
                self.worksheet = self.spreadsheet.worksheet(self.sheet_name)
                print(f"DEBUG: Successfully initialized Google Sheets")
            else:
                print(f"Google credentials file not found: {self.credentials_file}")
                self.client = None
                self.spreadsheet = None
                self.worksheet = None
        except Exception as e:
            print(f"Error initializing Google Sheets: {e}")
            self.client = None
            self.spreadsheet = None
            self.worksheet = None
    
    async def create_headers_if_needed(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google Sheets –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        if not self.worksheet:
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = self.worksheet.row_values(1)
            if not headers or len(headers) < 8:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [
                    "ID", "–¢–µ–∫—Å—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", 
                    "–°—Ç–∞—Ç—É—Å", "IP –∞–¥—Ä–µ—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–°–ø–∞–º"
                ]
                self.worksheet.update('A1:H1', [headers])
                print("Google Sheets headers created")
            return True
        except Exception as e:
            print(f"Error creating headers: {e}")
            return False
    
    async def add_complaint_to_sheet(self, complaint_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –≤ Google Sheets"""
        if not self.worksheet:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self.create_headers_if_needed()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            row_data = [
                complaint_data.get('id', ''),
                complaint_data.get('text', ''),
                complaint_data.get('category', ''),
                complaint_data.get('sentiment', ''),
                complaint_data.get('status', ''),
                complaint_data.get('ip_address', ''),
                complaint_data.get('created_at', ''),
                '–î–∞' if complaint_data.get('is_spam', False) else '–ù–µ—Ç'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            self.worksheet.append_row(row_data)
            return True
        except Exception as e:
            print(f"Error adding complaint to sheet: {e}")
            return False
    
    async def get_complaints_summary(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∂–∞–ª–æ–± –∏–∑ Google Sheets"""
        if not self.worksheet:
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_values = self.worksheet.get_all_values()
            
            if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                return {
                    "total_complaints": 0,
                    "categories": {},
                    "sentiments": {},
                    "statuses": {}
                }
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            data_rows = all_values[1:]
            
            summary = {
                "total_complaints": len(data_rows),
                "categories": {},
                "sentiments": {},
                "statuses": {}
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            for row in data_rows:
                if len(row) >= 5:
                    category = row[2] if len(row) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    sentiment = row[3] if len(row) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    status = row[4] if len(row) > 4 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    summary["categories"][category] = summary["categories"].get(category, 0) + 1
                    summary["sentiments"][sentiment] = summary["sentiments"].get(sentiment, 0) + 1
                    summary["statuses"][status] = summary["statuses"].get(status, 0) + 1
            
            return summary
        except Exception as e:
            print(f"Error getting summary: {e}")
            return None 