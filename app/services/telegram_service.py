import httpx
import os
from typing import Dict, Any

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        chat_id_str = os.getenv("TELEGRAM_CHAT_ID")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —á–∏—Å–ª–æ
        try:
            self.chat_id = int(chat_id_str) if chat_id_str else None
        except (ValueError, TypeError):
            self.chat_id = None
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_notification(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            print("Telegram bot not configured")
            return False
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.chat_id,
                        "text": message,
                        "parse_mode": parse_mode
                    },
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("ok", False)
                else:
                    print(f"Telegram API error: {response.status_code}")
                    return False
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            return False
    
    async def send_complaint_notification(self, complaint_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
        if not self.bot_token or not self.chat_id:
            print("Telegram bot not configured")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
üö® <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #{complaint_data.get('id', 'N/A')}</b>

üìù <b>–¢–µ–∫—Å—Ç:</b> {complaint_data.get('text', 'N/A')}

üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {complaint_data.get('category', 'N/A')}
üòä <b>–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {complaint_data.get('sentiment', 'N/A')}
üìç <b>IP:</b> {complaint_data.get('ip_address', 'N/A')}
üïê <b>–í—Ä–µ–º—è:</b> {complaint_data.get('created_at', 'N/A')}

{'‚ö†Ô∏è <b>–°–ø–∞–º:</b> –î–∞' if complaint_data.get('is_spam', False) else ''}
            """.strip()
            
            success = await self.send_notification(message)
            if success:
                print(f"Successfully sent Telegram notification for complaint {complaint_data.get('id')}")
            else:
                print(f"Failed to send Telegram notification for complaint {complaint_data.get('id')}")
            return success
        except Exception as e:
            print(f"Error sending Telegram notification for complaint {complaint_data.get('id')}: {e}")
            return False
    
    async def send_daily_report(self, complaints_count: int, open_complaints: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.bot_token or not self.chat_id:
            print("Telegram bot not configured for daily report")
            return False
        
        try:
            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üìà <b>–í—Å–µ–≥–æ –∂–∞–ª–æ–± –∑–∞ –¥–µ–Ω—å:</b> {complaints_count}
üî¥ <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –∂–∞–ª–æ–±:</b> {open_complaints}
‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {complaints_count - open_complaints}

üïê –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            """.strip()
            
            success = await self.send_notification(message)
            if success:
                print(f"Successfully sent daily report: {complaints_count} total, {open_complaints} open")
            else:
                print(f"Failed to send daily report")
            return success
        except Exception as e:
            print(f"Error sending daily report: {e}")
            return False 